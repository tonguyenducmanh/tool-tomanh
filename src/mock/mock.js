/**
 * file chứa toàn bộ mock data cho từng file vue để test
 * đảm bảo rằng các trường trong từng object mock phải được khai báo trong file vue tương ứng ở phần data
 */

export const compareCodeMock = {
  firstCodeFile: `<template>\n  <div class="td-input" :class="{ 'flex-col': isLabelTop }">\n\n\n\n    <div class="td-label" :class="{ 'td-label-top': isLabelTop }" v-if="label">\n      {{ label }}\n    </div>\n    <input\n      :placeholder="placeHolder"\n      :value="modelValue"\n      @input="changeInputValue"\n      :disabled="readOnly"\n    />\n    <slot></slot>\n  </div>\n</template>\n\n\x3Cscript>\nimport _ from "@/common/TDUtility.js";\n\nexport default {\n  name: "TDInput",\n  created() {},\n  mounted() {},\n  methods: {},\n  props: {\n    placeHolder: {\n      type: String,\n      default: "Nhập giá trị",\n    },\n    modelValue: {\n      type: String,\n      default: null,\n    },\n    readOnly: {\n      type: Boolean,\n      default: false,\n    },\n    label: {\n      type: String,\n      default: null,\n    },\n    isLabelTop: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      value: null,\n    };\n  },\n  watch: {},\n  methods: {\n    changeInputValue(e) {\n      let me = this;\n      me.$emit("update:modelValue", e.target.value);\n    },\n  },\n};\n\x3C/script>\n<style lang="scss" scoped>\n.td-input {\n  display: flex;\n  height: 100%;\n  width: 100%;\n  align-items: center;\n  margin: var(--padding);\n  .td-label {\n    overflow-wrap: normal; /* Allows breaking long words */\n    word-break: keep-all; /* For wider browser support */\n    white-space: nowrap; /* Ensure wrapping is enabled */\n    padding-right: var(--padding);\n  }\n  .td-label-top {\n    padding-bottom: var(--padding);\n  }\n  input {\n    border: 2px solid var(--border-color);\n    width: 100%;\n    padding: var(--padding);\n    border-radius: var(--border-radius);\n    background-color: var(--bg-sub-color);\n    color: var(--text-primary-color);\n  }\n\n  input:focus {\n    outline: none;\n    border: 2px solid var(--focus-color);\n  }\n}\n\n\n\n</style>`,
  secondCodeFile: `<template>\n  <div\n    class="td-input"\n    :class="{ 'flex-col': isLabelTop, 'td-input-read-only': readOnly }"\n  >\n    <div class="td-label" :class="{ 'td-label-top': isLabelTop }" v-if="label">\n      {{ label }}\n    </div>\n    <input\n      :placeholder="placeHolder"\n      :value="modelValue"\n      @input="changeInputValue"\n      :disabled="readOnly"\n    />\n    <slot></slot>\n  </div>\n</template>\n\n\x3Cscript>\nimport _ from "@/common/TDUtility.js";\n\nexport default {\n  name: "TDInput",\n  created() {},\n  mounted() {},\n  methods: {},\n  props: {\n    placeHolder: {\n      type: String,\n      default: "Nhập giá trị",\n    },\n    modelValue: {\n      type: String,\n      default: null,\n    },\n    readOnly: {\n      type: Boolean,\n      default: false,\n    },\n    label: {\n      type: String,\n      default: null,\n    },\n    isLabelTop: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      value: null,\n    };\n  },\n  watch: {},\n  methods: {\n    changeInputValue(e) {\n      let me = this;\n      me.$emit("update:modelValue", e.target.value);\n    },\n  },\n};\n\x3C/script>\n<style lang="scss" scoped>\n.td-input {\n  display: flex;\n  height: 100%;\n  width: 100%;\n  align-items: center;\n  margin: var(--padding);\n  .td-label {\n    overflow-wrap: normal; /* Allows breaking long words */\n    word-break: keep-all; /* For wider browser support */\n    white-space: nowrap; /* Ensure wrapping is enabled */\n    padding-right: var(--padding);\n  }\n  .td-label-top {\n    padding-bottom: var(--padding);\n  }\n  input {\n    border: 2px solid var(--border-color);\n    width: 100%;\n    padding: var(--padding);\n    border-radius: var(--border-radius);\n    background-color: var(--bg-main-color);\n    color: var(--text-primary-color);\n  }\n\n  input:focus {\n    outline: none;\n    border: 2px solid var(--focus-color);\n  }\n}\n.td-input-read-only input {\n  background-color: var(--bg-sub-color);\n}\n</style>`,
};

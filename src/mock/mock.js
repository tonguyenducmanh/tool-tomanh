/**
 * file chứa toàn bộ mock data cho từng file vue để test
 * đảm bảo rằng các trường trong từng object mock phải được khai báo trong file vue tương ứng ở phần data
 */

export const compareCodeMock = {
  firstCodeFile: `<template>\n  <div class="td-input" :class="{ 'flex-col': isLabelTop }">\n\n\n\n    <div class="td-label" :class="{ 'td-label-top': isLabelTop }" v-if="label">\n      {{ label }}\n    </div>\n    <input\n      :placeholder="placeHolder"\n      :value="modelValue"\n      @input="changeInputValue"\n      :disabled="readOnly"\n    />\n    <slot></slot>\n  </div>\n</template>\n\n\x3Cscript>\nimport _ from "@/common/TDUtility.js";\n\nexport default {\n  name: "TDInput",\n  created() {},\n  mounted() {},\n  methods: {},\n  props: {\n    placeHolder: {\n      type: String,\n      default: "Nhập giá trị",\n    },\n    modelValue: {\n      type: String,\n      default: null,\n    },\n    readOnly: {\n      type: Boolean,\n      default: false,\n    },\n    label: {\n      type: String,\n      default: null,\n    },\n    isLabelTop: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      value: null,\n    };\n  },\n  watch: {},\n  methods: {\n    changeInputValue(e) {\n      let me = this;\n      me.$emit("update:modelValue", e.target.value);\n    },\n  },\n};\n\x3C/script>\n<style lang="scss" scoped>\n.td-input {\n  display: flex;\n  height: 100%;\n  width: 100%;\n  align-items: center;\n  margin: var(--padding);\n  .td-label {\n    overflow-wrap: normal; /* Allows breaking long words */\n    word-break: keep-all; /* For wider browser support */\n    white-space: nowrap; /* Ensure wrapping is enabled */\n    padding-right: var(--padding);\n  }\n  .td-label-top {\n    padding-bottom: var(--padding);\n  }\n  input {\n    border: 2px solid var(--border-color);\n    width: 100%;\n    padding: var(--padding);\n    border-radius: var(--border-radius);\n    background-color: var(--bg-sub-color);\n    color: var(--text-primary-color);\n  }\n\n  input:focus {\n    outline: none;\n    border: 2px solid var(--focus-color);\n  }\n}\n\n\n\n</style>`,
  secondCodeFile: `<template>\n  <div\n    class="td-input"\n    :class="{ 'flex-col': isLabelTop, 'td-input-read-only': readOnly }"\n  >\n    <div class="td-label" :class="{ 'td-label-top': isLabelTop }" v-if="label">\n      {{ label }}\n    </div>\n    <input\n      :placeholder="placeHolder"\n      :value="modelValue"\n      @input="changeInputValue"\n      :disabled="readOnly"\n    />\n    <slot></slot>\n  </div>\n</template>\n\n\x3Cscript>\nimport _ from "@/common/TDUtility.js";\n\nexport default {\n  name: "TDInput",\n  created() {},\n  mounted() {},\n  methods: {},\n  props: {\n    placeHolder: {\n      type: String,\n      default: "Nhập giá trị",\n    },\n    modelValue: {\n      type: String,\n      default: null,\n    },\n    readOnly: {\n      type: Boolean,\n      default: false,\n    },\n    label: {\n      type: String,\n      default: null,\n    },\n    isLabelTop: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      value: null,\n    };\n  },\n  watch: {},\n  methods: {\n    changeInputValue(e) {\n      let me = this;\n      me.$emit("update:modelValue", e.target.value);\n    },\n  },\n};\n\x3C/script>\n<style lang="scss" scoped>\n.td-input {\n  display: flex;\n  height: 100%;\n  width: 100%;\n  align-items: center;\n  margin: var(--padding);\n  .td-label {\n    overflow-wrap: normal; /* Allows breaking long words */\n    word-break: keep-all; /* For wider browser support */\n    white-space: nowrap; /* Ensure wrapping is enabled */\n    padding-right: var(--padding);\n  }\n  .td-label-top {\n    padding-bottom: var(--padding);\n  }\n  input {\n    border: 2px solid var(--border-color);\n    width: 100%;\n    padding: var(--padding);\n    border-radius: var(--border-radius);\n    background-color: var(--bg-main-color);\n    color: var(--text-primary-color);\n  }\n\n  input:focus {\n    outline: none;\n    border: 2px solid var(--focus-color);\n  }\n}\n.td-input-read-only input {\n  background-color: var(--bg-sub-color);\n}\n</style>`,
};

export const downloadVSCodeExtMock = {
  itemName: "GitHub.copilot-chat",
  version: "0.27.2025050203",
};

export const JSONToPostgreSQLMock = {
  tableName: "account_object",
  schemaName: "sme",
  primaryKeyField: "account_object_id",
  inputJSON:
    '{"account_object_id":"65205f0c-033e-4fd4-ae2d-9f8765309909","employee_id":"09aa963c-e0f6-4cea-971b-664bbc462f69","due_time":0,"account_object_type":1,"min_debt_due_date":"2025-03-18T00:00:00.000+07:00","crm_id":"65205f0c-033e-4fd4-ae2d-9f8765309909","is_vendor":false,"is_local_object":false,"is_customer":true,"is_employee":false,"inactive":false,"receiptable_debt_amount":0,"account_object_code":"KH0000002","account_object_name":"Adina","address":"1, Xã Hoàng Diệu, Huyện Chương Mỹ, Thành phố Hà Nội, Việt Nam","description":"Bò wang","legal_representative":"Adina","district":"Huyện Chương Mỹ","ward_or_commune":"Xã Hoàng Diệu","country":"Việt Nam","province_or_city":"Hà Nội","receive_account":"131","is_same_address":false,"account_object_shipping_address":"[{\\"location_name\\":\\"\\"}]","is_convert":false,"is_remind_debt":true,"employee_name":"Nguyễn Bình An","employee_code":"NBAN","is_sync_corp":false,"closing_amount":892500,"is_group":false,"edit_version":433498495,"search_data":"(smecloud_g2)công ty cổ phần misa- tập đoàn test","branch_id":"41558052-ef5d-4f71-a207-7c74b6dd54fa","branch_name":"(SMECLOUD_G2)Công ty cổ phần MISA- Tập đoàn test","created_date":"2025-03-18T17:21:18.099099+07:00","modified_date":"2025-03-18T17:22:05.5765764+07:00","created_by":"CRM","modified_by":"Nguyễn Bình An","auto_refno":false,"force_update":true,"state":0}',
};

export const mappingJSONMock = {
  originalObjectText: '{"a":123,"b":"221","c":{"d":"abaac","e":"12315"}}',
  targetObjectText: '{"a":123,"b":"2212"}',
};
